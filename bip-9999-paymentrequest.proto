//
// Simple Bitcoin Payment Protocol messages
//
// Use fields 1000+ for extensions;
// to avoid conflicts, register extensions via pull-req at
// https://github.com/bitcoin/bips/blob/master/bip-0070/extensions.mediawiki
//

package payments;
option java_package = "org.bitcoin.protocols.payments";
option java_outer_classname = "Protos";

// VERSION 2: 
// A reference to a public/private keypair.
// Both used to reference a private key for signing inputs,
//  and a public key (or its hash) in a change output.
message KeyRef {
        required bytes  pubkey = 1;           // Public key
        optional uint32 bip32_index = 2;      // BIP32 key derivation index for this key, if applicable
        // Add as many more optional fields as desired to help identify a particular key
}
// VERSION 2: Order to sign a transaction input
message SignInput {
        required KeyRef signer_prvkey = 1;    // Sign with this private key 
        required uint32 input_index = 2;      // Index of input to sign
        required bytes  prev_out_script = 3;  // The script that the input redeems. scriptPubKey/redeemScript (the script placed in the scriptSig for transaction hashing)
        required uint8  sig_hash_flag = 4;    // Sign using this SIGHASH flag
}
// VERSION 2: A reference to an output, in the unsigned transaction,
//  that belongs to the client
message ChangeOut {
        required uint32 output_index = 1;     // Output index of the change output
        required KeyRef change_pubkey = 2;    // The output sends funds to this public key
}
// VERSION 2: Order to sign a transaction
message SignTx {
        required bytes unsigned_tx = 1;         // Unsigned transaction
        repeated SignInput sign_inputs = 2;     // Inputs to sign in unsigned transaction
        repeated ChangeOut change_outs = 3;     // Outputs in the unsigned transaction that belong to the client
        repeated bytes spent_txs = 4;           // Transactions containing all the outputs redeemed by inputs to sign in "unsigned_tx"
}

// Generalized form of "send payment to this/these bitcoin addresses"
message Output {
        optional uint64 amount = 1 [default = 0]; // amount is integer-number-of-satoshis
        required bytes script = 2; // usually one of the standard Script forms
}
message PaymentDetails { // version 2 with non-empty "outputs" field is same as version 1
        optional string network = 1 [default = "main"]; // "main" or "test"
        repeated Output outputs = 2;        // Where payment should be sent (this field and "sign_tx" are mutually exclusive)
        required uint64 time = 3;           // Timestamp; when payment request created
        optional uint64 expires = 4;        // Timestamp; when this request should be considered invalid
        optional string memo = 5;           // Human-readable description of request for the customer
        optional string payment_url = 6;    // URL to send Payment and get PaymentACK
        optional bytes merchant_data = 7;   // Arbitrary data to include in the Payment message
        repeated SignTx sign_tx = 8;        // VERSION 2: Sign this transaction to pay the server (this field and "outputs" are mutually exclusive)
}
message PaymentRequest {
        optional uint32 payment_details_version = 1 [default = 1];
        optional string pki_type = 2 [default = "none"];  // none / x509+sha256 / x509+sha1
        optional bytes pki_data = 3;                      // depends on pki_type
        required bytes serialized_payment_details = 4;    // PaymentDetails
        optional bytes signature = 5;                     // pki-dependent signature
}
message X509Certificates {
        repeated bytes certificate = 1;    // DER-encoded X.509 certificate chain
}
message Payment {
        optional bytes merchant_data = 1;  // From PaymentDetails.merchant_data
        // Version 1 PaymentDetails: Signed transactions that satisfy PaymentDetails.outputs
        // Version 2 PaymentDetails: Signed transactions that satisfy PaymentDetails.sign_tx
        //      Notes: Signatures are placed in the scriptSig, serialized as, first, a "var_int"
        //              indicating the number of signatures that follow, followed by this number of
        //              serialized signatures each with a "var_int" prefix indicating length.
        repeated bytes transactions = 2;   
        repeated Output refund_to = 3;     // Where to send refunds, if a refund is necessary
        optional string memo = 4;          // Human-readable message for the merchant
}
message PaymentACK {
        required Payment payment = 1;      // Payment message that triggered this ACK
        optional string memo = 2;          // human-readable message for customer
}
